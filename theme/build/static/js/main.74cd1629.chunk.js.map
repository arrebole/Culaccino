{"version":3,"sources":["components/Header.tsx","components/MuiPaper.tsx","api/index.ts","views/Home.tsx","views/Paper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["headerStyle","display","alignItems","height","backgroundColor","boxShadow","Header","style","padding","margin","fontSize","href","color","textDecoration","MuiPaperStyle","flexDirection","border","MuiPaperHeader","textAlign","MuiPaper","props","to","title","justifyContent","create_at","split","width","src","cover","alt","summary","getDashboard","fetch","then","response","json","getDetail","Main","useState","MuiPaperList","setMuiPaperList","length","api","res","data","map","item","maxWidth","key","Home","id","React","Component","createMarkup","__html","marked","setData","window","location","pathname","substring","content","className","dangerouslySetInnerHTML","setOptions","highlight","code","lang","hljs","value","Paper","App","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74cd1629.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst headerStyle: React.CSSProperties = {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    height: \"56px\", \r\n    backgroundColor: \"#1976d2\",\r\n    boxShadow: \"0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)\",\r\n}\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <header style={ headerStyle } > \r\n            <nav style={{ padding: \"0px 20px\" }}>\r\n                <h1 style={{ margin: \"0px\", fontSize: \"1.3rem\" }}><a href=\"/\" style={{color: \"#fff\", textDecoration: \"none\"}}>Culaccino</a></h1>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport {DashboardData} from \"../api/index\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst MuiPaperStyle:React.CSSProperties = {\r\n    display: \"flex\",\r\n    flexDirection:\"column\",\r\n    alignItems: \"center\",\r\n    padding: \"20px\",\r\n    margin: \"0px 0px\",\r\n    border:\"1px solid #c4c4c4\",\r\n    backgroundColor:\"#fff\",\r\n    boxShadow: \"0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12)\",\r\n}\r\n\r\nconst MuiPaperHeader:React.CSSProperties = {\r\n    textAlign: \"center\",\r\n}\r\n\r\nconst MuiPaper: React.FC<DashboardData> = (props) => {\r\n    return (\r\n        <div style = { MuiPaperStyle }>\r\n            <div style={ MuiPaperHeader }>\r\n                <div style={{ margin:\"5px 0px\" }}>\r\n                    <Link style={{ fontSize: \"1.4rem\", color: \"#1976d2\", textDecoration: \"none\" }} to={props.title}>{ props.title }</Link>\r\n                </div>\r\n                <div style={ {color:\"rgb(151, 151, 151)\", fontSize:\"12px\", display:\"flex\", justifyContent:\"center\"} }>\r\n                    <div style={{padding:\"0px 5px\"}}>Create on: </div> <time>{props.create_at.split(\" \")[0]}</time>\r\n                    <div style={{padding:\"0px 5px\"}}>|</div> \r\n                    <div style={{padding:\"0px 5px\"}}>Update on: </div> <time>{props.create_at.split(\" \")[0]}</time>\r\n                </div>\r\n            </div>\r\n            <div style={{padding:\"10px\"}}>\r\n                <img  style={{width:\"100%\"}} src={ props.cover } alt=\"img\"/>\r\n            </div>\r\n            <p style={{ fontSize: \"0.9rem\"}}>{ props.summary }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MuiPaper","\r\nexport interface DashboardData {\r\n    title: string,\r\n    type: string,\r\n    cover: string,\r\n    create_at: string,\r\n    update_at: string,\r\n    summary: string,\r\n}\r\n\r\nexport interface DetailData{\r\n    title: string,\r\n    type: string,\r\n    cover: string,\r\n    create_at: string,\r\n    update_at: string,\r\n    summary: string,\r\n    content: string,\r\n}\r\n\r\nexport interface Dashboard {\r\n    code: number,\r\n    message: string,\r\n    data: DashboardData[]\r\n}\r\n\r\nexport interface Detail {\r\n    code: number,\r\n    message: string,\r\n    data: DetailData,\r\n}\r\n\r\n\r\nfunction getDashboard(): Promise<Dashboard> {\r\n    return fetch(\"/api/dashboard\").then(response => response.json())\r\n}\r\n\r\nfunction getDetail(title?: string): Promise<Detail> {\r\n    return fetch(`/api/paper?title=${title}`).then(response => response.json())\r\n}\r\n\r\n\r\nexport default {\r\n    getDashboard,\r\n    getDetail,\r\n}","import React, { useState } from 'react';\r\nimport Header from '../components/Header'\r\nimport MuiPaper from '../components/MuiPaper'\r\nimport api, { DashboardData } from \"../api\"\r\n\r\n\r\nfunction Main() {\r\n    const [MuiPaperList, setMuiPaperList] = useState<DashboardData[]>([]);\r\n    if( MuiPaperList.length === 0) api.getDashboard().then(res => { setMuiPaperList(res.data)})\r\n    return (\r\n        <main style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n            {MuiPaperList.map(item =>\r\n                <article style={{ width: \"95%\", maxWidth: \"900px\", padding: \"10px\" }} key={item.title}>\r\n                    <MuiPaper {...item}></MuiPaper>\r\n                </article>\r\n            )}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default class Home extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"home\" style={{backgroundColor: \"#eee\"}}><Header /><Main /> </div>\r\n        )\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport marked from 'marked';\r\nimport hljs from 'highlight.js'\r\nimport Header from '../components/Header'\r\nimport api from \"../api\"\r\n\r\n// marked use highlight Plugin\r\nmarked.setOptions({ highlight: (code, lang) => hljs.highlight(lang, code).value });\r\n\r\nfunction createMarkup(data: string) {\r\n    return {__html: marked(data)};\r\n  }\r\n\r\nfunction Main() {\r\n    const [data, setData] = useState<string>(\"Load...\");\r\n    if(data === \"Load...\") api.getDetail(window.location.pathname.substring(1)).then(res => { setData(res.data.content)});\r\n    return (\r\n        <article style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n            <section style={{  maxWidth:\"980px\", width:\"95%\", padding: \"30px 10px\" }}>\r\n                <div className=\"markdown-body\" dangerouslySetInnerHTML={createMarkup(data)} ></div>\r\n            </section>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default class Paper extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"paper\"><Header /><Main/> </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport Home from './views/Home';\nimport Paper from './views/Paper';\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\"><Home /></Route>\n        <Route path=\"/:name\"><Paper /></Route>\n        <Route path=\"*\"><Redirect to={{ pathname: \"/\" }}/></Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"normalize.css\"\nimport \"github-markdown-css\"\nimport \"highlight.js/styles/tomorrow.css\";\nimport \"./styles/index.scss\"\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}